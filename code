–∑–∞–≤–¥–∞–Ω–Ω—è(1)
  import random

def guess_the_number():
    number = random.randint(1, 10)
    print("–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 10!")
    
    while True:
        try:
            guess = int(input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å: "))
            if guess < number:
                print("–ë—ñ–ª—å—à–µ!")
            elif guess > number:
                print("–ú–µ–Ω—à–µ!")
            else:
                print("–í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ! üéâ")
                break
        except ValueError:
            print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ!")

if __name__ == "__main__":
    guess_the_number()

–∑–∞–≤–¥–∞–Ω–Ω—è(2)
import random

def guess_the_number():
    number = random.randint(1, 50)
    print("–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 50!")
    
    while True:
        try:
            guess = int(input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å"))
            difference = abs(guess - number)
            
            if difference == 0:
                print("–í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ!")
                break
            elif difference <= 3:
                print("–î—É–∂–µ –±–ª–∏–∑—å–∫–æ!")
            elif difference <= 10:
                print("–ë–ª–∏–∑—å–∫–æ!")
            else:
                print("–î–∞–ª–µ–∫–æ!")
        except ValueError:
            print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Ü—ñ–ª–µ —á–∏—Å–ª–æ!")

if __name__ == "__main__":
    guess_the_number()

–∑–∞–≤–¥–∞–Ω–Ω—è(3)
import random

def generate_pin():
    return str(random.randint(1000, 9999))

def count_correct_digits(secret, guess):
    return sum(1 for s, g in zip(secret, guess) if s == g)

def guess_pin():
    pin = generate_pin()
    attempts = 5
    print("–í–≥–∞–¥–∞–π 4-–∑–Ω–∞—á–Ω–∏–π PIN-–∫–æ–¥! –£ –≤–∞—Å —î 5 —Å–ø—Ä–æ–±.")
    
    while attempts > 0:
        guess = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à PIN-–∫–æ–¥: ")
        
        if not guess.isdigit() or len(guess) != 4:
            print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π –∫–æ–¥!")
            continue
        
        if guess == pin:
            print("–í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏ PIN-–∫–æ–¥! üéâ")
            return
        else:
            attempts -= 1
            correct_digits = count_correct_digits(pin, guess)
            if attempts > 0:
                print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ü–∏—Ñ—Ä –Ω–∞ –º—ñ—Å—Ü—ñ: {correct_digits}. –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {attempts}")
            else:
                print(f"–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ —Å–ø—Ä–æ–±–∏. –°–µ–∫—Ä–µ—Ç–Ω–∏–π PIN-–∫–æ–¥: {pin}")

if __name__ == "__main__":
    guess_pin()


–∑–∞–≤–¥–∞–Ω–Ω—è(4)
import random

def generate_pin():
    return str(random.randint(1000, 9999))

def count_correct_digits(secret, guess):
    return sum(1 for s, g in zip(secret, guess) if s == g)

def guess_pin():
    pin = generate_pin()
    attempts = 5
    print("–í–≥–∞–¥–∞–π 4-–∑–Ω–∞—á–Ω–∏–π PIN-–∫–æ–¥! –£ –≤–∞—Å —î 5 —Å–ø—Ä–æ–±.")
    
    while attempts > 0:
        guess = input("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à PIN-–∫–æ–¥: ")
        
        if not guess.isdigit() or len(guess) != 4:
            print("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å 4-–∑–Ω–∞—á–Ω–∏–π —á–∏—Å–ª–æ–≤–∏–π –∫–æ–¥!")
            continue
        
        if guess == pin:
            print("–í—ñ—Ç–∞—é! –í–∏ –≤–≥–∞–¥–∞–ª–∏ PIN-–∫–æ–¥! üéâ")
            return
        else:
            attempts -= 1
            correct_digits = count_correct_digits(pin, guess)
            if attempts > 0:
                print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö —Ü–∏—Ñ—Ä –Ω–∞ –º—ñ—Å—Ü—ñ: {correct_digits}. –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Å–ø—Ä–æ–±: {attempts}")
            else:
                print(f"–í–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–ª–∏ –≤—Å—ñ —Å–ø—Ä–æ–±–∏. –°–µ–∫—Ä–µ—Ç–Ω–∏–π PIN-–∫–æ–¥: {pin}")

if __name__ == "__main__":
    guess_pin()


–∑–∞–≤–¥–∞–Ω–Ω—è(5)
import tkinter as tk
import random

colors = ["—á–µ—Ä–≤–æ–Ω–∏–π", "—Å–∏–Ω—ñ–π", "–∑–µ–ª–µ–Ω–∏–π", "–∂–æ–≤—Ç–∏–π", "—Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π"]
warm_colors = ["—á–µ—Ä–≤–æ–Ω–∏–π", "–∂–æ–≤—Ç–∏–π"]
cold_colors = ["—Å–∏–Ω—ñ–π", "–∑–µ–ª–µ–Ω–∏–π", "—Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π"]

root = tk.Tk()
root.title("–ì—Ä–∞: –ö–æ–ª—å–æ—Ä–æ–≤–∏–π –∫–æ–¥")

secret_color = random.choice(colors)

def check_color():
    guess = entry.get().lower()
    if guess == secret_color:
        result_label.config(text="–í—ñ—Ç–∞—î–º–æ! –í–∏ –≤–≥–∞–¥–∞–ª–∏ –∫–æ–ª—ñ—Ä!", fg="green")
    elif guess in warm_colors:
        result_label.config(text="–¶–µ —Ç–µ–ø–ª–∏–π –∫–æ–ª—ñ—Ä!", fg="orange")
    elif guess in cold_colors:
        result_label.config(text="–¶–µ —Ö–æ–ª–æ–¥–Ω–∏–π –∫–æ–ª—ñ—Ä!", fg="blue")
    else:
        result_label.config(text="–¶–µ–π –∫–æ–ª—ñ—Ä –Ω–µ —î –≤ —Å–ø–∏—Å–∫—É –º–æ–∂–ª–∏–≤–∏—Ö.", fg="red")
    entry.delete(0, tk.END)

instruction_label = tk.Label(root, text="–í–≥–∞–¥–∞–π—Ç–µ –∫–æ–ª—ñ—Ä! –í–≤–µ–¥—ñ—Ç—å –æ–¥–∏–Ω –∑ —Ç–∞–∫–∏—Ö –∫–æ–ª—å–æ—Ä—ñ–≤: —á–µ—Ä–≤–æ–Ω–∏–π, —Å–∏–Ω—ñ–π, –∑–µ–ª–µ–Ω–∏–π, –∂–æ–≤—Ç–∏–π, —Ñ—ñ–æ–ª–µ—Ç–æ–≤–∏–π.")
instruction_label.pack()

entry = tk.Entry(root)
entry.pack()

check_button = tk.Button(root, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", command=check_color)
check_button.pack()

result_label = tk.Label(root, text="")
result_label.pack()

root.mainloop()
